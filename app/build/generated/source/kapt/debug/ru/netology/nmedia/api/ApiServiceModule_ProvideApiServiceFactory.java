// Generated by Dagger (https://dagger.dev).
package ru.netology.nmedia.api;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ru.netology.nmedia.auth.AppAuth;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiServiceModule_ProvideApiServiceFactory implements Factory<ApiService> {
  private final Provider<AppAuth> authProvider;

  public ApiServiceModule_ProvideApiServiceFactory(Provider<AppAuth> authProvider) {
    this.authProvider = authProvider;
  }

  @Override
  public ApiService get() {
    return provideApiService(authProvider.get());
  }

  public static ApiServiceModule_ProvideApiServiceFactory create(Provider<AppAuth> authProvider) {
    return new ApiServiceModule_ProvideApiServiceFactory(authProvider);
  }

  public static ApiService provideApiService(AppAuth auth) {
    return Preconditions.checkNotNullFromProvides(ApiServiceModule.INSTANCE.provideApiService(auth));
  }
}
